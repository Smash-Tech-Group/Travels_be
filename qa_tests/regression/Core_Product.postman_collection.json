{
	"info": {
		"_postman_id": "d3ddabdb-5b5c-403f-b3b7-886c00029121",
		"name": "Core Product",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20878764",
		"_collection_link": "https://galactic-shadow-835409.postman.co/workspace/Team-Workspace~4a13918d-144e-4a20-8c3a-228c10c8bb3f/collection/20878764-d3ddabdb-5b5c-403f-b3b7-886c00029121?action=share&source=collection_link&creator=20878764"
	},
	"item": [
		{
			"name": "Data Privacy--@Utibe",
			"item": [
				{
					"name": "Register user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API is available\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    pm.collectionVariables.set('userId',pm.response.json().data.user.id)\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" pm.test('Generate random email', function(){\r",
									"\r",
									"    let randomEmail=function makeEmail() { \r",
									"        var strValues=\"abcd\"; \r",
									"        let name='utest'\r",
									"        var strEmail = \"@gmail.com\"; \r",
									"        var strTmp; \r",
									"        for (var i=0;i<10;i++) { \r",
									"        strTmp = strValues.charAt(Math.round(strValues.length*Math.random())); \r",
									"        strEmail =strTmp +strEmail; \r",
									"        }\r",
									"        return strEmail\r",
									" }\r",
									"\r",
									" \r",
									"\r",
									"   pm.collectionVariables.set('randomEmail',randomEmail())\r",
									"\r",
									" })"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"pa$Sword1\",\r\n  \"first_name\": \"Lord\",\r\n  \"last_name\": \"Lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API is available\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"    let userAccessToken=pm.response.json().access_token\r",
									"\r",
									"\r",
									"   pm.collectionVariables.set('userAccessToken', userAccessToken)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"pa$Sword1\"\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-001-Fetch data privacy setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API is available\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/data-privacy-settings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"data-privacy-settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-002-Create or update data privacy setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API is available\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"profile_visibility\": true,\r\n  \"share_data_with_partners\": true,\r\n  \"receice_email_updates\": true,\r\n  \"enable_two_factor_authentication\": true,\r\n  \"use_data_encryption\": true,\r\n  \"allow_analytics\": true,\r\n  \"personalized_ads\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/data-privacy-settings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"data-privacy-settings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Download--@Utibe",
			"item": [
				{
					"name": "Register user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    pm.collectionVariables.set('userId',pm.response.json().data.user.id)\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('generate random email', function(){\r",
									"\r",
									"     let randomEmail=function makeEmail() { \r",
									"        var strValues=\"abcd\"; \r",
									"        let name='utest'\r",
									"        var strEmail = \"@gmail.com\"; \r",
									"        var strTmp; \r",
									"        for (var i=0;i<10;i++) { \r",
									"        strTmp = strValues.charAt(Math.round(strValues.length*Math.random())); \r",
									"        strEmail =strTmp +strEmail; \r",
									"        }\r",
									"        return strEmail\r",
									" }\r",
									"\r",
									" console.log(randomEmail())\r",
									"\r",
									" pm.collectionVariables.set('randomEmail',randomEmail())\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"pa$Sword1\",\r\n  \"first_name\": \"lo\",\r\n  \"last_name\": \"lo\",\r\n  \"admin_secret\": \"lo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.staging.tifi.tv/api/v1/auth/register",
							"protocol": "https",
							"host": [
								"api",
								"staging",
								"tifi",
								"tv"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Set useraccess token\", function () {\r",
									"    let userAccessToken=pm.response.json().access_token\r",
									"\r",
									"\r",
									"    pm.collectionVariables.set('userAccessToken', userAccessToken)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"pa$Sword1\"\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-001-Download pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"transcript\": \"string\",\r\n  \"summary\": \"string\",\r\n  \"video_title\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/tools/download/pdf",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"tools",
								"download",
								"pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-002-Test tool limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"transcript\": \"string\",\r\n  \"summary\": \"string\",\r\n  \"video_title\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/tools/download/test",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"tools",
								"download",
								"test"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User--@Utibe",
			"item": [
				{
					"name": "Register user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.collectionVariables.set('userId',pm.response.json().data.user.id)\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('set random email', function(){\r",
									"     let randomEmail=function makeEmail() { \r",
									"        var strValues=\"abcd\"; \r",
									"        let name='utest'\r",
									"        var strEmail = \"@gmail.com\"; \r",
									"        var strTmp; \r",
									"        for (var i=0;i<10;i++) { \r",
									"        strTmp = strValues.charAt(Math.round(strValues.length*Math.random())); \r",
									"        strEmail =strTmp +strEmail; \r",
									"        }\r",
									"        return strEmail\r",
									" }\r",
									"\r",
									" \r",
									"\r",
									" pm.collectionVariables.set('randomEmail',randomEmail())\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"pa$Sword1\",\r\n  \"first_name\": \"lo\",\r\n  \"last_name\": \"lo\",\r\n  \"admin_secret\": \"lo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.staging.tifi.tv/api/v1/auth/register",
							"protocol": "https",
							"host": [
								"api",
								"staging",
								"tifi",
								"tv"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Set useraccess token\", function () {\r",
									"    let userAccessToken=pm.response.json().access_token\r",
									"\r",
									"\r",
									"    pm.collectionVariables.set('userAccessToken', userAccessToken)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('old password', function(){\r",
									"    let oldPassword='pas$word1'\r",
									"    pm.collectionVariables.set('oldPassword', oldPassword)\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"pa$Sword1\"\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-006-Register-admin-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"set admin id\", function () {\r",
									"    \r",
									"\r",
									"    let adminId=pm.response.json().data.id\r",
									"\r",
									"    pm.collectionVariables.set('adminId', adminId)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test('generate email', function(){\r",
									"    \r",
									"let newAdminUser=function generateRandomEmail() {\r",
									"    // Define possible characters for the local part and domain\r",
									"    const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    const domain = 'gmail.com';\r",
									"\r",
									"    // Function to generate a random string of a given length\r",
									"    function getRandomString(length) {\r",
									"        let result = '';\r",
									"        const charactersLength = chars.length;\r",
									"        for (let i = 0; i < length; i++) {\r",
									"            result += chars.charAt(Math.floor(Math.random() * charactersLength));\r",
									"        }\r",
									"        return result;\r",
									"    }\r",
									"\r",
									"    // Generate random local part and select a random domain\r",
									"    const localPart = getRandomString(3); // Adjust length as needed\r",
									"    \r",
									"\r",
									"    // Construct and return the random email\r",
									"    return `Admin${localPart}@${domain}`;\r",
									"}\r",
									"\r",
									"// Example usage:\r",
									"pm.collectionVariables.set('newAdminUser', newAdminUser())\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{newAdminUser}}\",\r\n  \"first_name\": \"lord\",\r\n  \"last_name\": \"lodrd\",\r\n  \"password\": \"pa@Sword1\",\r\n  \"is_active\": false,\r\n  \"is_deleted\": false,\r\n  \"is_verified\": false,\r\n  \"is_superadmin\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register-super-admin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register-super-admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-001-Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"\r",
									"    let res= pm.response.json().access_token\r",
									"\r",
									"\r",
									"    pm.collectionVariables.set('adminAccessToken',res)    \r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{newAdminUser}}\",\r\n  \"password\": \"pa@Sword1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.staging.tifi.tv/api/v1/auth/login",
							"protocol": "https",
							"host": [
								"api",
								"staging",
								"tifi",
								"tv"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-002-Get current users details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-003-GET all Deleted user account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.staging.tifi.tv/api/v1/users/delete",
							"protocol": "https",
							"host": [
								"api",
								"staging",
								"tifi",
								"tv"
							],
							"path": [
								"api",
								"v1",
								"users",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-005-Get users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-008-Export as csv",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/export/csv",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"export",
								"csv"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-009-Get User Activity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API is available\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{userId}}/activity",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"activity"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-010-Update user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('generate update email', function(){\r",
									"\r",
									"     let randomEmail=function makeEmail() { \r",
									"        var strValues=\"abcd\"; \r",
									"        let name='utest'\r",
									"        var strEmail = \"@gmail.com\"; \r",
									"        var strTmp; \r",
									"        for (var i=0;i<10;i++) { \r",
									"        strTmp = strValues.charAt(Math.round(strValues.length*Math.random())); \r",
									"        strEmail =strTmp +strEmail; \r",
									"        }\r",
									"        return strEmail\r",
									" }\r",
									"\r",
									" console.log(randomEmail())\r",
									"\r",
									" pm.collectionVariables.set('updateEmail',randomEmail())\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API is available 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"first_name\": \"me\",\r\n  \"last_name\": \"me\",\r\n  \"email\": \"{{updateEmail}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-012-Get user with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-011-Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-13-Restore Deleted User",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{userId}}/restore",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}",
								"restore"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-14-Change user password",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"old_password\": \"{{password}}\",\r\n  \"new_password\": \"pa$Sword22\",\r\n  \"confirm_new_password\": \"pa$Sword22\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/update/password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"update",
								"password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Job--@Utib",
			"item": [
				{
					"name": "Register-admin-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('set admin id', function (){\r",
									"  \r",
									"  let adminId=pm.response.json().data.id\r",
									"\r",
									"pm.collectionVariables.set('adminId', adminId)\r",
									"}\r",
									")\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test('random email', function(){\r",
									"    let newAdminUser=function generateRandomEmail() {\r",
									"    // Define possible characters for the local part and domain\r",
									"    const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    const domain = 'gmail.com';\r",
									"\r",
									"    // Function to generate a random string of a given length\r",
									"    function getRandomString(length) {\r",
									"        let result = '';\r",
									"        const charactersLength = chars.length;\r",
									"        for (let i = 0; i < length; i++) {\r",
									"            result += chars.charAt(Math.floor(Math.random() * charactersLength));\r",
									"        }\r",
									"        return result;\r",
									"    }\r",
									"\r",
									"    // Generate random local part and select a random domain\r",
									"    const localPart = getRandomString(3); // Adjust length as needed\r",
									"    \r",
									"\r",
									"    // Construct and return the random email\r",
									"    return `Admin${localPart}@${domain}`;\r",
									"}\r",
									"\r",
									"// Example usage:\r",
									"pm.collectionVariables.set('newAdminUser', newAdminUser())\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{newAdminUser}}\",\r\n  \"first_name\": \"lord\",\r\n  \"last_name\": \"lodrd\",\r\n  \"password\": \"pa@Sword1\",\r\n  \"is_active\": false,\r\n  \"is_deleted\": false,\r\n  \"is_verified\": false,\r\n  \"is_superadmin\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register-super-admin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register-super-admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"    let adminAccessToken=pm.response.json().access_token\r",
									"\r",
									"    pm.collectionVariables.set('adminAccessToken', adminAccessToken)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{newAdminUser}}\",\r\n  \r\n  \"password\": \"pa@Sword1\"\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-001-Get all jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/jobs/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-002-Update jobs",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/jobs/{job_id}/update_result",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"{job_id}",
								"update_result"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-003-Get manage user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{userAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/jobs/{job_id}/update_result",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"{job_id}",
								"update_result"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-004-Export Managed Jobs as Csv",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/jobs/export",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"jobs",
								"export"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Testimonial--@Utibe",
			"item": [
				{
					"name": "Register-admin-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"API is available 201\", function () {\r",
									"     pm.response.to.have.status(201);\r",
									"\r",
									"    let adminId=pm.response.json().data.id\r",
									"\r",
									"    pm.collectionVariables.set('adminId', adminId)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test('generate email', function(){\r",
									"    \r",
									"let newAdminUser=function generateRandomEmail() {\r",
									"    // Define possible characters for the local part and domain\r",
									"    const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    const domain = 'gmail.com';\r",
									"\r",
									"    // Function to generate a random string of a given length\r",
									"    function getRandomString(length) {\r",
									"        let result = '';\r",
									"        const charactersLength = chars.length;\r",
									"        for (let i = 0; i < length; i++) {\r",
									"            result += chars.charAt(Math.floor(Math.random() * charactersLength));\r",
									"        }\r",
									"        return result;\r",
									"    }\r",
									"\r",
									"    // Generate random local part and select a random domain\r",
									"    const localPart = getRandomString(3); // Adjust length as needed\r",
									"    \r",
									"\r",
									"    // Construct and return the random email\r",
									"    return `Admin${localPart}@${domain}`;\r",
									"}\r",
									"\r",
									"// Example usage:\r",
									"pm.collectionVariables.set('newAdminUser', newAdminUser())\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{newAdminUser}}\",\r\n  \"first_name\": \"lord\",\r\n  \"last_name\": \"lodrd\",\r\n  \"password\": \"pa@Sword1\",\r\n  \"is_active\": false,\r\n  \"is_deleted\": false,\r\n  \"is_verified\": false,\r\n  \"is_superadmin\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/register-super-admin",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register-super-admin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Admin Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"\r",
									"    let res= pm.response.json().access_token\r",
									"\r",
									"\r",
									"    pm.collectionVariables.set('adminAccessToken',res)    \r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{newAdminUser}}\",\r\n  \"password\": \"pa@Sword1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.staging.tifi.tv/api/v1/auth/login",
							"protocol": "https",
							"host": [
								"api",
								"staging",
								"tifi",
								"tv"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    pm.collectionVariables.set('userId',pm.response.json().data.user.id)\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"data\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.test('generate random email', function(){\r",
									"\r",
									"     let randomEmail=function makeEmail() { \r",
									"        var strValues=\"abcd\"; \r",
									"        let name='utest'\r",
									"        var strEmail = \"@gmail.com\"; \r",
									"        var strTmp; \r",
									"        for (var i=0;i<10;i++) { \r",
									"        strTmp = strValues.charAt(Math.round(strValues.length*Math.random())); \r",
									"        strEmail =strTmp +strEmail; \r",
									"        }\r",
									"        return strEmail\r",
									" }\r",
									"\r",
									" console.log(randomEmail())\r",
									"\r",
									" pm.collectionVariables.set('randomEmail',randomEmail())\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"pa$Sword1\",\r\n  \"first_name\": \"lo\",\r\n  \"last_name\": \"lo\",\r\n  \"admin_secret\": \"lo\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.staging.tifi.tv/api/v1/auth/register",
							"protocol": "https",
							"host": [
								"api",
								"staging",
								"tifi",
								"tv"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Set useraccess token\", function () {\r",
									"    let userAccessToken=pm.response.json().access_token\r",
									"\r",
									"\r",
									"    pm.collectionVariables.set('userAccessToken', userAccessToken)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{randomEmail}}\",\r\n  \"password\": \"pa$Sword1\"\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-001-Get all testimonial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/testimonials",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"testimonials"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-002-Create Testimonial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"    let testimonialId=pm.response.json().data.id\r",
									"\r",
									"    pm.collectionVariables.set('testimonialId', testimonialId)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"content\": \"frontend\",\r\n  \"rating\": 5,\r\n  \"client_name\": \"Loe John\",\r\n  \"client_position\": \"Team lead\",\r\n  \"avatar_url\": \"image.jpeg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/testimonials",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"testimonials"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-003-Get single testimonial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/testimonials/{{testimonialId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"testimonials",
								"{{testimonialId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-004-Update testimonial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"content\": \"backend\",\r\n  \"rating\": 5,\r\n  \"client_name\": \"Loe John\",\r\n  \"client_position\": \"Team lead\",\r\n  \"avatar_url\": \"updated.jpeg\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/testimonials/{{testimonialId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"testimonials",
								"{{testimonialId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-005-Delete testimonial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{adminAccessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/testimonials/{{testimonialId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"testimonials",
								"{{testimonialId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tools",
			"item": [
				{
					"name": "Summarize PDF",
					"item": [
						{
							"name": "Successfully summarize PDF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Parse job_id and store in collectionVariables\", () => {\r",
											"    const responseData = pm.response.json();\r",
											"    const jobId = responseData.data.job_id;\r",
											"\r",
											"    pm.collectionVariables.set(\"job_id_pdf\", jobId);\r",
											"});\r",
											"\r",
											"pm.test(\"Parse project_id and store in collectionVariables\", () => {\r",
											"    const responseData = pm.response.json();\r",
											"    const projectId = responseData.data.job_id;\r",
											"\r",
											"    pm.collectionVariables.set(\"project_id_pdf\", projectId);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Accepted\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Summary generation job initiated successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"project_id\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Ayuba Ebenezer/Downloads/Ebenezer Ayuba_Updated Resume (1).pdf"
										}
									]
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/pdf-summarizer",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"pdf-summarizer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Summarize without a PDF file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"Unsuccessful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid input\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Field required\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": [],
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/pdf-summarizer-test",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"pdf-summarizer-test"
									]
								}
							},
							"response": []
						},
						{
							"name": "Summarize with a non-PDF",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response time is less than 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"pm.test(\"Unsuccessful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid file format\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"400\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Ayuba Ebenezer/Downloads/screenshot.png"
										}
									]
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/pdf-summarizer",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"pdf-summarizer"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Translate Summary",
					"item": [
						{
							"name": "Successful Translation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Translation successful\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"translated_summary\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 4000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"summary\": \"This is a summary\",\r\n  \"target_language\": \"deutsch\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/translate-summary",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"translate-summary"
									]
								}
							},
							"response": []
						},
						{
							"name": "Translate Empty Summary - retest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Translation successful\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"translated_summary\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 4000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"summary\": \"\",\r\n  \"target_language\": \"deutsch\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/translate-summary",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"translate-summary"
									]
								}
							},
							"response": []
						},
						{
							"name": "Translate with missing target language and summary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid input\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Field required\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 4000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});\r",
											"\r",
											"pm.test(\"Unsuccessful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(422);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/translate-summary",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"translate-summary"
									]
								}
							},
							"response": []
						},
						{
							"name": "Summary with missing target_language field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid input\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Field required\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 4000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});\r",
											"\r",
											"pm.test(\"Unsuccessful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(422);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"summary\": \"string loremm\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/translate-summary",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"translate-summary"
									]
								}
							},
							"response": []
						},
						{
							"name": "Summary with missing summary field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid input\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Field required\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 4000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});\r",
											"\r",
											"pm.test(\"Unsuccessful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(422);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"target_language\": \"french\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/translate-summary",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"translate-summary"
									]
								}
							},
							"response": []
						},
						{
							"name": "Translate Long Sumary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Translation successful\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"translated_summary\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 12s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(12000);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"summary\": \"In today's fast-paced, information-driven world, critical thinking has become an essential skill. The digital age has revolutionized the way we access and process information, making it easier than ever to obtain knowledge from around the globe. However, this unprecedented access also comes with challenges, as the sheer volume of information can be overwhelming and often misleading. Critical thinking, the ability to analyze and evaluate information objectively, is crucial for navigating this landscape. This essay will explore the importance of critical thinking in the digital age, discussing its role in decision-making, problem-solving, and maintaining a healthy democracy.The Role of Critical Thinking in Decision-Making One of the primary areas where critical thinking is essential is decision-making. Every day, individuals are faced with countless choices, from personal decisions to more significant, life-altering ones. The abundance of information available online can be both a blessing and a curse in this regard. On one hand, it provides individuals with the tools they need to make informed decisions; on the other hand, it can lead to confusion and uncertainty when the information is contradictory or false. Critical thinking enables individuals to sift through the noise and identify the most reliable sources of information. It involves questioning the credibility of the sources, examining the evidence presented, and considering alternative viewpoints. By doing so, individuals can make decisions based on sound reasoning rather than being swayed by emotions or misinformation. In a world where fake news and biased reporting are rampant, the ability to think critically is more important than ever. Critical Thinking and Problem-Solving.Critical thinking also plays a vital role in problem-solving. In both personal and professional contexts, individuals are constantly faced with challenges that require innovative solutions. The digital age has amplified the complexity of these problems, as technology continues to evolve at a rapid pace, creating new challenges and opportunities. Problem-solving in the digital age requires more than just technical skills; it requires the ability to think critically and creatively. Critical thinkers can break down complex problems into manageable parts, identify underlying causes, and develop effective strategies for addressing them. They are also better equipped to anticipate potential obstacles and consider the long-term implications of their solutions. Moreover, critical thinking fosters adaptability, a crucial skill in a world where change is the only constant. Those who can think critically are more likely to embrace new technologies and approaches, as they can evaluate their potential benefits and risks with an open mind. In this way, critical thinking not only enhances problem-solving abilities but also promotes innovation and progress. Maintaining a Healthy Democracy, A healthy democracy relies on an informed and engaged citizenry. In the digital age, where information is readily available at the click of a button, the role of critical thinking in maintaining democratic values cannot be overstated. Citizens must be able to critically evaluate the information they receive from various media sources, understand the broader context, and make informed decisions about the issues that affect their lives. Without critical thinking, individuals are more susceptible to manipulation by those who seek to exploit their biases and emotions. This can lead to the spread of misinformation, polarization, and the erosion of democratic institutions. By contrast, a citizenry that values critical thinking is better equipped to hold their leaders accountable, engage in meaningful debate, and contribute to the democratic process. Education plays a key role in fostering critical thinking skills. Schools and universities must prioritize the development of these skills, teaching students how to analyze information, think logically, and approach problems with an open mind. Additionally, media literacy programs can help individuals of all ages navigate the complex information landscape of the digital age. Challenges to Critical Thinking in the Digital Age, Despite its importance, critical thinking faces several challenges in the digital age. One of the most significant is the sheer volume of information available online. The internet is a vast repository of knowledge, but it is also a breeding ground for misinformation, conspiracy theories, and biased reporting. Sorting through this information requires time and effort, which many individuals may be unwilling or unable to inves. Another challenge is the rise of echo chambers, where individuals are exposed only to information that confirms their existing beliefs. Social media algorithms often exacerbate this problem by prioritizing content that aligns with users' preferences, creating a feedback loop that reinforces biases and limits exposure to diverse perspectives. This can hinder critical thinking by making it more difficult for individuals to consider alternative viewpoints and engage in constructive dialogue. Moreover, the fast-paced nature of the digital world can discourage deep, reflective thinking. The constant stream of information from social media, news outlets, and other sources can create a sense of urgency, leading individuals to make snap judgments rather than taking the time to analyze and evaluate information thoroughly. Fostering Critical Thinking in the Digital Age,to overcome these challenges, it is essential to foster a culture of critical thinking in the digital age. This requires a multi-faceted approach that involves education, technology, and individual responsibility. Educational institutions must take the lead in teaching critical thinking skills from an early age. This includes not only traditional critical thinking exercises, such as analyzing texts and solving problems, but also digital literacy skills, such as evaluating online sources, recognizing bias, and understanding the impact of social media algorithms. By equipping students with these skills, educators can help them navigate the digital landscape with confidence and discernment. Technology companies also have a role to play in promoting critical thinking. Social media platforms and search engines can implement algorithms that prioritize high-quality, diverse content, rather than simply maximizing engagement. They can also provide users with tools to fact-check information, identify bias, and access multiple perspectives on a given issue. By doing so, they can help create a more informed and critically engaged user base. Finally, individuals themselves must take responsibility for their own critical thinking. This means actively seeking out diverse sources of information, questioning assumptions, and being willing to reconsider one's beliefs in light of new evidence. It also involves being aware of the cognitive biases that can distort thinking and making a conscious effort to mitigate their effects.Conclusin, In conclusion, critical thinking is an indispensable skill in the digital age. It enables individuals to make informed decisions, solve complex problems, and contribute to a healthy democracy. However, it also faces significant challenges, including the overwhelming volume of information, the rise of echo chambers, and the fast-paced nature of the digital world. To address these challenges, it is essential to foster a culture of critical thinking through education, technology, and individual responsibility. By doing so, we can ensure that the digital age remains a time of progress and enlightenment, rather than confusion and division.\",\r\n  \"target_language\": \"french\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/translate-summary",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"translate-summary"
									]
								}
							},
							"response": []
						},
						{
							"name": "Translate to Unsupported Language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Unsupported language\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 4000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
											"});\r",
											"\r",
											"pm.test(\"Unsuccessful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"summary\": \"string loremm\",\r\n  \"target_language\": \"English\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/translate-summary",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"translate-summary"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Subscribe Podcast",
					"item": [
						{
							"name": "Successful Podcast Summary Generation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Parse job_id and store in collectionVariables\", () => {\r",
											"    const responseData = pm.response.json();\r",
											"    const jobId = responseData.data.job_id;\r",
											"\r",
											"    pm.collectionVariables.set(\"job_id_podcast\", `${jobId}`);\r",
											"});\r",
											"\r",
											"pm.test(\"Parse project_id and store in collectionVariables\", () => {\r",
											"    const responseData = pm.response.json();\r",
											"    const projectId = responseData.data.job_id;\r",
											"\r",
											"    pm.collectionVariables.set(\"project_id_podcast\", `${projectId}`);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(202);\r",
											"});\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Podcast Summary generation job initiated successfully\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"project_id\");\r",
											"});\r",
											"pm.test(\"Response time is less than 15s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Accepted\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"podcast_url\": \"https://podcasts.apple.com/us/podcast/1-what-happens-in-vegas/id1627341228?i=1000564889978\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/summarize-podcast",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"summarize-podcast"
									]
								}
							},
							"response": []
						},
						{
							"name": "Handle Podcasts in Another Languageee",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.test(\"Parse job_id and store in collectionVariables\", () => {\r",
											"    const responseData = pm.response.json();\r",
											"    const jobId = responseData.data.job_id;\r",
											"\r",
											"    pm.collectionVariables.set(\"job_id_podcast\", `${jobId}`);\r",
											"});\r",
											"\r",
											"pm.test(\"Parse project_id and store in collectionVariables\", () => {\r",
											"    const responseData = pm.response.json();\r",
											"    const projectId = responseData.data.job_id;\r",
											"\r",
											"    pm.collectionVariables.set(\"project_id_podcast\", `${projectId}`);\r",
											"});\r",
											"\r",
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(202);\r",
											"});\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Podcast Summary generation job initiated successfully\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"project_id\");\r",
											"});\r",
											"pm.test(\"Response time is less than 15s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Accepted\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"podcast_url\": \"https://podcasts.apple.com/fr/podcast/beno%C3%AEt-bonus-version-de-julien/id1189243636?i=1000637254862\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/summarize-podcast",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"summarize-podcast"
									]
								}
							},
							"response": []
						},
						{
							"name": "Podcast Summary Generation with invalid url - retest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(500);\r",
											"});\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Failed to extract audio URL\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid URL 'Invalid url'\");\r",
											"});\r",
											"pm.test(\"Response time is less than 15s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"podcast_url\": \"Invalid url\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/summarize-podcast",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"summarize-podcast"
									]
								}
							},
							"response": []
						},
						{
							"name": "Podcast Summary Generation with missing url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(422);\r",
											"});\r",
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid input\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Field required\");\r",
											"});\r",
											"pm.test(\"Response time is less than 15s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/summarize-podcast",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"summarize-podcast"
									]
								}
							},
							"response": []
						},
						{
							"name": "Podcast Summary Generation with Unsupported Spotify link - retest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(500);\r",
											"});\r",
											"pm.test(\"Status code is 500\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"object is not subscriptable\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"error occurred\");\r",
											"});\r",
											"pm.test(\"Response time is less than 15s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"podcast_url\": \"https://open.spotify.com/episode/5FwIMB5n1V8sR7alqos7ga?si=aae18533ce774a72\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/summarize-podcast",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"summarize-podcast"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Summarize Audio",
					"item": [
						{
							"name": "Successful audio summarizer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Audio summary generation and transcription  job initiated successfully\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 15s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Accepted\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Ayuba Ebenezer/Music/Teni_-_Case.mp3"
										}
									]
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/audio-summarizer",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"audio-summarizer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Audio summarizer with invalid file format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid file format\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 15s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Ayuba Ebenezer/Music/Schitt's Creek S05E12 The Roast.mp4"
										}
									]
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/audio-summarizer",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"audio-summarizer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Audio summarizer with missing file",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid input\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Field required\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 15s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(15000);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": [],
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/summary/audio-summarizer",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"summary",
										"audio-summarizer"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Talking Head Video Upload",
					"item": [
						{
							"name": "Successful Talking Avatar Generation",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "script",
											"value": "This is a sample script",
											"type": "text"
										},
										{
											"key": "aspect_ratio",
											"value": "10:9",
											"type": "text"
										},
										{
											"key": "voice_over",
											"value": "Sample voiceover",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Ayuba Ebenezer/Pictures/FvhlECyWwAAhEOt.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/video/talking-head/image-upload",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"video",
										"talking-head",
										"image-upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Talking Avatar Generation with Missing Script",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid input\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Field required\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "script",
											"value": "This is a sample script",
											"type": "text",
											"disabled": true
										},
										{
											"key": "aspect_ratio",
											"value": "10:9",
											"type": "text"
										},
										{
											"key": "voice_over",
											"value": "Sample voiceover",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Ayuba Ebenezer/Pictures/FvhlECyWwAAhEOt.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/video/talking-head/image-upload",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"video",
										"talking-head",
										"image-upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Talking Avatar Generation with Missing  Aspect Ratio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid input\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Field required\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "script",
											"value": "This is a sample script",
											"type": "text"
										},
										{
											"key": "aspect_ratio",
											"value": "10:9",
											"type": "text",
											"disabled": true
										},
										{
											"key": "voice_over",
											"value": "Sample voiceover",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Ayuba Ebenezer/Pictures/FvhlECyWwAAhEOt.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/video/talking-head/image-upload",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"video",
										"talking-head",
										"image-upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Talking Avatar Generation with Missing  Voice Over",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid input\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Field required\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "script",
											"value": "This is a sample script",
											"type": "text"
										},
										{
											"key": "aspect_ratio",
											"value": "10:9",
											"type": "text"
										},
										{
											"key": "voice_over",
											"value": "Sample voiceover",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Ayuba Ebenezer/Pictures/FvhlECyWwAAhEOt.jpg"
										}
									]
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/video/talking-head/image-upload",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"video",
										"talking-head",
										"image-upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Talking Avatar Generation with Missing  Image File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid input\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Field required\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "script",
											"value": "This is a sample script",
											"type": "text"
										},
										{
											"key": "aspect_ratio",
											"value": "10:9",
											"type": "text"
										},
										{
											"key": "voice_over",
											"value": "Sample voiceover",
											"type": "text"
										},
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Ayuba Ebenezer/Pictures/FvhlECyWwAAhEOt.jpg",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/video/talking-head/image-upload",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"video",
										"talking-head",
										"image-upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "Talking Avatar Generation with Missing  All Required Fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.equal(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Unprocessable Entity\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid input\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"file\");\r",
											"});pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"voice_over\");\r",
											"});pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"aspect_ratio\");\r",
											"});pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"script\");\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Field required\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 10s\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "script",
											"value": "This is a sample script",
											"type": "text",
											"disabled": true
										},
										{
											"key": "aspect_ratio",
											"value": "10:9",
											"type": "text",
											"disabled": true
										},
										{
											"key": "voice_over",
											"value": "Sample voiceover",
											"type": "text",
											"disabled": true
										},
										{
											"key": "file",
											"type": "file",
											"src": "/C:/Users/Ayuba Ebenezer/Pictures/FvhlECyWwAAhEOt.jpg",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{host-E}}/api/v1/tools/video/talking-head/image-upload",
									"host": [
										"{{host-E}}"
									],
									"path": [
										"api",
										"v1",
										"tools",
										"video",
										"talking-head",
										"image-upload"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Authentication - Spartacus",
			"item": [
				{
					"name": "Sign Up User (Convey)",
					"item": [
						{
							"name": "BE-PY-01_Connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Body is correct\", function () {\r",
											"    pm.response.to.have.body('{\"status_code\":200,\"success\":true,\"message\":\"Welcome to API\",\"data\":{\"URL\":\"\"}}'\r",
											"    );\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.staging.tifi.tv/",
									"protocol": "https",
									"host": [
										"api",
										"staging",
										"tifi",
										"tv"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-02_Register new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"const {data} = pm.response.json();\r",
											"pm.collectionVariables.set('xuser-k', data.user.email);\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let date = Date.now();\r",
											"let email = 'john' + date + '@doe.com';\r",
											"pm.collectionVariables.set('useremail-k', email);\r",
											"\r",
											"let pwd = 'JohnDoe@123';\r",
											"pm.collectionVariables.set('userpwd-k', pwd);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"{{userpwd-k}}\",\r\n  \"first_name\": \"John\",\r\n  \"last_name\": \"Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-03_Required Fields (email empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"{{userpwd-k}}\",\r\n  \"first_name\": \"John\",\r\n  \"last_name\": \"Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-04_Required Fields (password empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"\",\r\n  \"first_name\": \"John4\",\r\n  \"last_name\": \"Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-06_Required Fields (first name empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"{{userpwd-k}}\",\r\n  \"first_name\": \"\",\r\n  \"last_name\": \"Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-07_Required Fields (last name empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"{{userpwd-k}}\",\r\n  \"first_name\": \"John\",\r\n  \"last_name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-08_Required Fields (all empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"\",\r\n  \"first_name\": \"\",\r\n  \"last_name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-09_Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"john2@doe\",\r\n  \"password\": \"{{userpwd-k}}\",\r\n  \"first_name\": \"John\",\r\n  \"last_name\": \"Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-10_Invalid Password (only 4 alphaNum chars)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"Jo@1\",\r\n  \"first_name\": \"John\",\r\n  \"last_name\": \"Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-11_Invalid Password (only 8 alpha chars)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"JohnJohn\",\r\n  \"first_name\": \"John\",\r\n  \"last_name\": \"Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-12_Register Existing Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User with this email already exists\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{xuser-k}}\",\r\n  \"password\": \"{{userpwd-k}}\",\r\n  \"first_name\": \"Kate\",\r\n  \"last_name\": \"Flynn\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Sign Up Super Admin (Convey)",
					"item": [
						{
							"name": "BE-PY-01_Connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.staging.tifi.tv/",
									"protocol": "https",
									"host": [
										"api",
										"staging",
										"tifi",
										"tv"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-02_Register new super admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful POST request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
											"});\r",
											"\r",
											"const {data} = pm.response.json();\r",
											"pm.collectionVariables.set('xadmin-k', data.user.email);\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let date = Date.now();\r",
											"let email = 'admin' + date + '@doe.com';\r",
											"pm.collectionVariables.set('adminemail-k', email);\r",
											"\r",
											"let pwd = 'JohnDoe@123';\r",
											"pm.collectionVariables.set('adminpwd-k', pwd);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{adminemail-k}}\",\r\n  \"password\": \"{{adminpwd-k}}\",\r\n  \"first_name\": \"Admin\",\r\n  \"last_name\": \"Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register-super-admin",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register-super-admin"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-03_Required Fields (email empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"{{adminpwd-k}}\",\r\n  \"first_name\": \"Admin\",\r\n  \"last_name\": \"Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register-super-admin",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register-super-admin"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-04_Required Fields (password empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{adminemail-k}}\",\r\n  \"password\": \"\",\r\n  \"first_name\": \"Admin4\",\r\n  \"last_name\": \"Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register-super-admin",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register-super-admin"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-06_Required Fields (first name empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{adminemail-k}}\",\r\n  \"password\": \"{{adminpwd-k}}\",\r\n  \"first_name\": \"\",\r\n  \"last_name\": \"Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register-super-admin",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register-super-admin"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-07_Required Fields (last name empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{adminemail-k}}\",\r\n  \"password\": \"{{adminpwd-k}}\",\r\n  \"first_name\": \"John\",\r\n  \"last_name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register-super-admin",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register-super-admin"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-08_Required Fields (all empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"\",\r\n  \"first_name\": \"\",\r\n  \"last_name\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register-super-admin",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register-super-admin"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-09_Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"john2@doe\",\r\n  \"password\": \"{{adminpwd-k}}\",\r\n  \"first_name\": \"Admin\",\r\n  \"last_name\": \"Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register-super-admin",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register-super-admin"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-10_Invalid Password (only 4 alphaNum chars)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{adminemail-k}}\",\r\n  \"password\": \"Jo@1\",\r\n  \"first_name\": \"Admin\",\r\n  \"last_name\": \"Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register-super-admin",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register-super-admin"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-11_Invalid Password (only 8 alpha chars)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{adminemail-k}}\",\r\n  \"password\": \"AdminAdmin\",\r\n  \"first_name\": \"Admin\",\r\n  \"last_name\": \"Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register-super-admin",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register-super-admin"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-12_Register Existing Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"User with this email already exists\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{xadmin-k}}\",\r\n  \"password\": \"{{adminpwd-k}}\",\r\n  \"first_name\": \"Kate\",\r\n  \"last_name\": \"Flynn\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/register-super-admin",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"register-super-admin"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login (Convey)",
					"item": [
						{
							"name": "BE-PY-01_Connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.staging.tifi.tv/",
									"protocol": "https",
									"host": [
										"api",
										"staging",
										"tifi",
										"tv"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-02_Login existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const {access_token} = pm.response.json();\r",
											"pm.collectionVariables.set('token-k', access_token);\r",
											"\r",
											"pm.test(\"Has a token\", function(){\r",
											"    return 'access_token';\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token-k}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"{{userpwd-k}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/login",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-03_Required Fields (email empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"{{userpwd-k}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/login",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-04_Required Fields (password empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Bad Request\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400,422]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/login",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-08_Required Fields (all empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/login",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-09_Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"john@doe\",\r\n  \"password\": \"{{userpwd-k}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/login",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-10_Invalid Password (only 4 alphaNum chars)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"Jo@1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/login",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-11_Invalid Password (only 8 alpha chars)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400, 422]);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"JohnJohn\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/login",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Refresh & Logout (Convey)",
					"item": [
						{
							"name": "BE-PY-01_Connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.staging.tifi.tv/",
									"protocol": "https",
									"host": [
										"api",
										"staging",
										"tifi",
										"tv"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-02_Login existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const {access_token} = pm.response.json();\r",
											"pm.collectionVariables.set('token-k', access_token);\r",
											"\r",
											"pm.test(\"Has a token\", function(){\r",
											"    return 'access_token';\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token-k}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"{{userpwd-k}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/login",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-02_Refresh Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const {access_token} = pm.response.json();\r",
											"pm.collectionVariables.set('token2-k', access_token);\r",
											"\r",
											"// pm.test(\"New token generated?\", function(){\r",
											"//     return 'access_token';\r",
											"    \r",
											"// })\r",
											"\r",
											"pm.test(\"Is the token refreshed?\", function () {\r",
											"    'token-k' != 'token2-k';\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token-k}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/refresh-access-token",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"refresh-access-token"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-02_Login existing user Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const {access_token} = pm.response.json();\r",
											"pm.collectionVariables.set('token-k', access_token);\r",
											"\r",
											"pm.test(\"Has a token\", function(){\r",
											"    return 'access_token';\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token-k}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"{{userpwd-k}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/login",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-02_Logout existing user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// const {access_token} = pm.response.json();\r",
											"// pm.collectionVariables.set('token-k', access_token);\r",
											"\r",
											"pm.test(\"Has a token\", function(){\r",
											"    return 'access_token';\r",
											"    \r",
											"})\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token-k}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/logout",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Magic Link (Convey)",
					"item": [
						{
							"name": "BE-PY-01_Connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.staging.tifi.tv/",
									"protocol": "https",
									"host": [
										"api",
										"staging",
										"tifi",
										"tv"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-02_Send Magic Link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Parse access token and store in collectionVariables\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    const magic = responseJson.data[\"magic-link\"];\r",
											"    \r",
											"    var fields = magic.split('=');\r",
											"\r",
											"var magic_link = fields[1];\r",
											"\r",
											"    pm.collectionVariables.set('magic_link', magic_link);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"user_email\": \"{{useremail-k}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/magic-link",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"magic-link"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-03_Verify Magic Link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200;\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/magic-link/verify?token={{magic_link}}",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"magic-link",
										"verify"
									],
									"query": [
										{
											"key": "token",
											"value": "{{magic_link}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-06_Required Fields (email empty)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Invalid Input\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/magic-link",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"magic-link"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Forget Password (Convey)",
					"item": [
						{
							"name": "BE-PY-01_Connection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.staging.tifi.tv/",
									"protocol": "https",
									"host": [
										"api",
										"staging",
										"tifi",
										"tv"
									],
									"path": [
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-02_Request Forget Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"Password reset link sent successfully\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Get reset link\", () => {\r",
											"    const responseJson = pm.response.json();\r",
											"    const reset = responseJson.data[\"reset_link\"];\r",
											"    \r",
											"    var fields = reset.split('=');\r",
											"\r",
											"var reset_link = fields[1];\r",
											"\r",
											"    pm.collectionVariables.set('reset_link', reset_link);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"user_email\": \"{{useremail-k}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/request-forget-password",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"request-forget-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-04_Process Forget Password Link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Token is valid for user xyz\", function () {\r",
											"    pm.response.to.have.status(302);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/forget-password?token={{reset_link}}",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"forget-password"
									],
									"query": [
										{
											"key": "token",
											"value": "{{reset_link}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-03_Change Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let pwd2 = 'JohnDoe@1234';\r",
											"pm.collectionVariables.set('userpwd2-k', pwd2);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"new_password\": \"{{userpwd2-k}}\",\r\n  \"confirm_password\": \"{{userpwd2-k}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/forget-password?token={{reset_link}}",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"forget-password"
									],
									"query": [
										{
											"key": "token",
											"value": "{{reset_link}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "BE-PY-05_Reset Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token-k}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api+json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"new_password\": \"{{userpwd-k}}\",\r\n  \"confirm_password\": \"{{userpwd-k}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host-k}}/auth/reset-password",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"reset-password"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Google Auth",
					"item": [
						{
							"name": "Initiate Google Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 2 seconds\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host-k}}/auth/google/initiate",
									"host": [
										"{{host-k}}"
									],
									"path": [
										"auth",
										"google",
										"initiate"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Billing Plan - Spartacus",
			"item": [
				{
					"name": "Get All Billing Plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/billing-plans",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"billing-plans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Super Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const {access_token} = pm.response.json();\r",
									"pm.collectionVariables.set('tokenadmin-k', access_token);\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{adminemail-k}}\",\r\n  \"password\": \"{{adminpwd-k}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/auth/login",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Billing Plan",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date = Date.now();\r",
									"let plan = 'Starter' + date;\r",
									"pm.collectionVariables.set('plan_name-k', plan);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New Plan created successfully\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const {data}= pm.response.json();\r",
									"pm.collectionVariables.set('billing_id', data.id);\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenadmin-k}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"plan_name\": \"{{plan_name-k}}\",\r\n  \"price\": 5,\r\n  \"plan_interval\": \"monthly\",\r\n  \"currency\": \"USD\",\r\n  \"features\": [\r\n    \"AI-powered transcription, subtitles, and translation\",\r\n    \"300 minutes per month\",\r\n    \"Export transcriptions in Word, TXT and PDF\"\r\n    \r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/billing-plans",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"billing-plans"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Billing Plan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Billing plan fetched successfully\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/billing-plans/{{billing_id}}",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"billing-plans",
								"{{billing_id}}"
							],
							"query": [
								{
									"key": "{{billing_id}}",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Billing Plan",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Plan successfully updated\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date = Date.now();\r",
									"let new_name = 'New Plan-' + date;\r",
									"pm.collectionVariables.set('new_plan-k', new_name);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenadmin-k}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"plan_name\": \"{{new_plan-k}}\",\r\n  \"price\": 2,\r\n  \"plan_interval\": \"monthly\",\r\n  \"currency\": \"USD\",\r\n  \"features\": [\r\n    \"AI-powered transcription, subtitles, and translation\"\r\n    \r\n    \r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/billing-plans/{{billing_id}}",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"billing-plans",
								"{{billing_id}}"
							],
							"query": [
								{
									"key": "{{billing_id}}",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Resources - Spartacus",
			"item": [
				{
					"name": "BE-PY-01_Connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.staging.tifi.tv/",
							"protocol": "https",
							"host": [
								"api",
								"staging",
								"tifi",
								"tv"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-02_Login Super Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const {access_token} = pm.response.json();\r",
									"pm.collectionVariables.set('tokenadmin-k', access_token);\r",
									"\r",
									"pm.test(\"Has a token\", function(){\r",
									"    return 'access_token';\r",
									"    \r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{adminemail-k}}\",\r\n  \"password\": \"{{adminpwd-k}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/auth/login",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Resources successfully retrieved\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenadmin-k}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/resources",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const {data} = pm.response.json();\r",
									"pm.collectionVariables.set('resource_id', data.id);\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date = Date.now();\r",
									"let title = 'Topic-' + date;\r",
									"let content = 'This is a test to automate the creation of resources. Only the titles are dynamic, but they all share the same content and image.'\r",
									"pm.collectionVariables.set('title-k', title);\r",
									"pm.collectionVariables.set('content-k', content);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenadmin-k}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{title-k}}\",\r\n  \"content\": \"{{content-k}}\",\r\n  \"image_url\": \"https://images.pexels.com/photos/3762940/pexels-photo-3762940.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/resources",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"resources"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Public Resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Resources successfully retrieved\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenadmin-k}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/resources/public",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"resources",
								"public"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search wrong Keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No Resource(s) for this query\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenadmin-k}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/resources/search?keywords=wilberforce",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"resources",
								"search"
							],
							"query": [
								{
									"key": "keywords",
									"value": "wilberforce"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search correct Keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Resources successfully retrieved\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenadmin-k}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/resources/public?keyword=dynamic",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"resources",
								"public"
							],
							"query": [
								{
									"key": "keyword",
									"value": "dynamic"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Resource Successfully Updated\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 405]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenadmin-k}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{title-k}}\",\r\n  \"content\": \"This content was updated, and the image removed. But the title remains dynamic. The resource id is {{resource_id}}.\",\r\n  \"image_url\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/resources/{{resource_id}}",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"resources",
								"{{resource_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm before Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Resource Not Found\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenadmin-k}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/resources/search?keywords={{resource_id}}",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"resources",
								"search"
							],
							"query": [
								{
									"key": "keywords",
									"value": "{{resource_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Resource deleted\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenadmin-k}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host-k}}/resources/{{resource_id}}",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"resources",
								"{{resource_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm after Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The status for this resource shows 'is_deleted = true'\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{tokenadmin-k}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/resources/search?keywords={{resource_id}}",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"resources",
								"search"
							],
							"query": [
								{
									"key": "keywords",
									"value": "{{resource_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Projects - Spartacus",
			"item": [
				{
					"name": "BE-PY-01_Connection Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.staging.tifi.tv/",
							"protocol": "https",
							"host": [
								"api",
								"staging",
								"tifi",
								"tv"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-02_Register new user Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const {data} = pm.response.json();\r",
									"pm.collectionVariables.set('xuser-k', data.user.email);\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date = Date.now();\r",
									"let email = 'john' + date + '@doe.com';\r",
									"pm.collectionVariables.set('useremail-k', email);\r",
									"\r",
									"let pwd = 'JohnDoe@123';\r",
									"pm.collectionVariables.set('userpwd-k', pwd);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"{{userpwd-k}}\",\r\n  \"first_name\": \"John\",\r\n  \"last_name\": \"Doe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/auth/register",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-02_Login existing user Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const {access_token} = pm.response.json();\r",
									"pm.collectionVariables.set('token-k', access_token);\r",
									"\r",
									"pm.test(\"Has a token\", function(){\r",
									"    return 'access_token';\r",
									"    \r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"{{userpwd-k}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/auth/login",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 4 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token-k}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/projects",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.execution.skipRequest();\r",
									"\r",
									"let date = Date.now();\r",
									"let project = 'Project-' + date;\r",
									"pm.collectionVariables.set('project_title-k', project);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New Project Created\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token-k}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{project_title-k}}\",\r\n  \"project_type\": \"Audio Transcriber\",\r\n  \"description\": \"This is a dummy description solely for the purpose of automated testing.\",\r\n  \"file_url\": \"string\",\r\n  \"result\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/projects",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Presets - Spartacus",
			"item": [
				{
					"name": "BE-PY-01_Connection Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.staging.tifi.tv/",
							"protocol": "https",
							"host": [
								"api",
								"staging",
								"tifi",
								"tv"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Avatars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/presets/avatars",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"presets",
								"avatars"
							]
						}
					},
					"response": []
				},
				{
					"name": "Load All Avatars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/presets/load-avatars",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"presets",
								"load-avatars"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Audio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/presets/audio",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"presets",
								"audio"
							]
						}
					},
					"response": []
				},
				{
					"name": "Load All Audio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/presets/load-audio",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"presets",
								"load-audio"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate New Avatars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/presets/avatars/generate",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"presets",
								"avatars",
								"generate"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// pm.execution.skipRequest();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Regions, Timezone & Language - Spartacus",
			"item": [
				{
					"name": "BE-PY-01_Connection Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.staging.tifi.tv/",
							"protocol": "https",
							"host": [
								"api",
								"staging",
								"tifi",
								"tv"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-02_Register new user Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const {data} = pm.response.json();\r",
									"pm.collectionVariables.set('xuser-k', data.user.email);\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date = Date.now();\r",
									"let email = 'john' + date + '@doe.com';\r",
									"pm.collectionVariables.set('useremail-k', email);\r",
									"\r",
									"let pwd = 'JohnDoe@123';\r",
									"pm.collectionVariables.set('userpwd-k', pwd);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"{{userpwd-k}}\",\r\n  \"first_name\": \"John\",\r\n  \"last_name\": \"Doe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/auth/register",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-02_Login existing user Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const {access_token} = pm.response.json();\r",
									"pm.collectionVariables.set('token-k', access_token);\r",
									"\r",
									"pm.test(\"Has a token\", function(){\r",
									"    return 'access_token';\r",
									"    \r",
									"})\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"{{userpwd-k}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/auth/login",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create or Update Region",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token-k}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"region\": \"Europe\",\r\n  \"language\": \"English\",\r\n  \"timezone\": \"GMT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/regions",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"regions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Region by User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token-k}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/regions",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"regions"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// pm.execution.skipRequest();"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Dashboard - Spartacus",
			"item": [
				{
					"name": "BE-PY-01_Connection Copy 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.execution.skipRequest();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.staging.tifi.tv/",
							"protocol": "https",
							"host": [
								"api",
								"staging",
								"tifi",
								"tv"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-02_Register new user Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const {data} = pm.response.json();\r",
									"pm.collectionVariables.set('xuser-k', data.user.email);\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let date = Date.now();\r",
									"let email = 'john' + date + '@doe.com';\r",
									"pm.collectionVariables.set('useremail-k', email);\r",
									"\r",
									"let pwd = 'JohnDoe@123';\r",
									"pm.collectionVariables.set('userpwd-k', pwd);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"{{userpwd-k}}\",\r\n  \"first_name\": \"John\",\r\n  \"last_name\": \"Doe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/auth/register",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "BE-PY-02_Login existing user Copy 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const {access_token} = pm.response.json();\r",
									"pm.collectionVariables.set('token-k', access_token);\r",
									"\r",
									"pm.test(\"Has a token\", function(){\r",
									"    return 'access_token';\r",
									"    \r",
									"})\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api+json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/vnd.api+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"{{useremail-k}}\",\r\n  \"password\": \"{{userpwd-k}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/auth/login",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token-k}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/dashboard/projects",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"dashboard",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create a Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"const {data} = pm.response.json();\r",
									"pm.collectionVariables.set('dash_project_id', data.id);\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token-k}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"{{project_title-k}}\",\r\n  \"project_type\": \"PDF Summarizer\",\r\n  \"description\": \"This is a new project created from the user Dashboard.\",\r\n  \"file_url\": \"string\",\r\n  \"result\": \"string\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host-k}}/dashboard/projects",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"dashboard",
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token-k}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/dashboard/projects/{{dash_project_id}}",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"dashboard",
								"projects",
								"{{dash_project_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token-k}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/dashboard/notifications",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"dashboard",
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single Notification with invalid id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Notification not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2 seconds\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// pm.execution.skipRequest();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token-k}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host-k}}/dashboard/notifications/{xyz}",
							"host": [
								"{{host-k}}"
							],
							"path": [
								"dashboard",
								"notifications",
								"{xyz}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// pm.execution.skipRequest();\r",
							"// pm.test.skip();\r",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"Content-Type is present\", function () {\r",
					"    pm.response.to.have.header(\"Content-Type\");\r",
					"});\r",
					"\r",
					"pm.test(\"Response time is below 500ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.staging.tifi.tv"
		},
		{
			"key": "randomEmail",
			"value": "bccdadca@gmail.com"
		},
		{
			"key": "userId",
			"value": "066c7968-1923-7a71-8000-427ff7999d39"
		},
		{
			"key": "userAccessToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiMDY2Yzc4OWItODI3ZC03MzJmLTgwMDAtMzJjNGQxZDNkZjIwIiwiZXhwIjoxNzI0MzkyMjA5LCJ0eXBlIjoiYWNjZXNzIn0.MtDSyM8uw7EbVS4c_50vtndPBjznarC0vrpMp9cCB6s"
		},
		{
			"key": "newAdminUser",
			"value": "Adminhck@gmail.com"
		},
		{
			"key": "adminAccessToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiMDY2Yzc0OGEtZjcyMy03NDRkLTgwMDAtM2IzOGIwZGQzZjg1IiwiZXhwIjoxNzI0MzkxNDcwLCJ0eXBlIjoiYWNjZXNzIn0.L0IipMK9KI4xApJwbV0Xl49h7L5A2BmI3mmkvD2tudU"
		},
		{
			"key": "testimonialId",
			"value": "066c793a-0743-7ac0-8000-863678849c7b"
		},
		{
			"key": "adminToken",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiMDY2Yzc5NmItZmYwMS03NjQ1LTgwMDAtNzUwOTZjMDIxZjMwIiwiZXhwIjoxNzI0MzkyMzI4LCJ0eXBlIjoiYWNjZXNzIn0.zKe0l-3jIeroBA1RBsRUVULMJO6_oGES5e_kXZDRueU"
		},
		{
			"key": "updateEmail",
			"value": "daabbbccb@gmail.com"
		},
		{
			"key": "host-E",
			"value": "https://api.staging.tifi.tv",
			"type": "string"
		},
		{
			"key": "host-k",
			"value": "https://api.staging.tifi.tv/api/v1",
			"type": "string"
		},
		{
			"key": "oldPassword",
			"value": ""
		},
		{
			"key": "adminId",
			"value": ""
		},
		{
			"key": "job_id_podcast",
			"value": ""
		},
		{
			"key": "project_id_podcast",
			"value": ""
		},
		{
			"key": "useremail-k",
			"value": ""
		},
		{
			"key": "userpwd-k",
			"value": ""
		},
		{
			"key": "xuser-k",
			"value": ""
		},
		{
			"key": "adminemail-k",
			"value": ""
		},
		{
			"key": "adminpwd-k",
			"value": ""
		},
		{
			"key": "xadmin-k",
			"value": ""
		},
		{
			"key": "token-k",
			"value": ""
		},
		{
			"key": "token2-k",
			"value": ""
		},
		{
			"key": "magic_link",
			"value": ""
		},
		{
			"key": "reset_link",
			"value": ""
		},
		{
			"key": "userpwd2-k",
			"value": ""
		},
		{
			"key": "tokenadmin-k",
			"value": ""
		},
		{
			"key": "plan_name-k",
			"value": ""
		},
		{
			"key": "billing_id",
			"value": ""
		},
		{
			"key": "new_plan-k",
			"value": ""
		},
		{
			"key": "title-k",
			"value": ""
		},
		{
			"key": "content-k",
			"value": ""
		},
		{
			"key": "resource_id",
			"value": ""
		},
		{
			"key": "dash_project_id",
			"value": ""
		}
	]
}